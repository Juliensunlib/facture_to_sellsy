// Module d'int√©gration avec l'API Sellsy V2
import axios from 'axios';

// URL de base pour l'API Sellsy V2
const SELLSY_API_URL = 'https://api.sellsy.com/v2';
const SELLSY_OAUTH_URL = 'https://login.sellsy.com/oauth2/access-tokens';

// Stockage du token d'acc√®s
let accessToken = null;
let tokenExpiration = null;

/**
 * Obtient un token d'acc√®s pour l'API Sellsy
 * @param {number} retryCount - Le nombre de tentatives d√©j√† effectu√©es
 * @returns {Promise<string>} - Le token d'acc√®s
 */
async function getAccessToken(retryCount = 0) {
  if (accessToken && tokenExpiration && tokenExpiration > Date.now()) {
    return accessToken;
  }
  const MAX_RETRIES = 3;
  try {
    console.log("üîÑ Obtention d'un nouveau token d'acc√®s Sellsy...");
    const requestData = {
      grant_type: 'client_credentials',
      client_id: process.env.SELLSY_CLIENT_ID,
      client_secret: process.env.SELLSY_CLIENT_SECRET
    };
    const response = await axios.post(SELLSY_OAUTH_URL, requestData, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    if (!response.data || !response.data.access_token) {
      throw new Error("Token non re√ßu dans la r√©ponse de l'API Sellsy");
    }
    console.log("‚úÖ Token d'acc√®s Sellsy obtenu avec succ√®s");
    accessToken = response.data.access_token;
    tokenExpiration = Date.now() + (response.data.expires_in * 1000) - 300000; // 5 minutes de marge
    return accessToken;
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'obtention du token Sellsy (tentative ${retryCount + 1}/${MAX_RETRIES}):`, error.message);
    if (error.response) {
      console.error('D√©tails de l\'erreur:', {
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data
      });
    }
    if (retryCount < MAX_RETRIES - 1) {
      await new Promise(resolve => setTimeout(resolve, 3000));
      return getAccessToken(retryCount + 1);
    }
    throw new Error("Impossible d'obtenir un token d'acc√®s Sellsy apr√®s plusieurs tentatives.");
  }
}

/**
 * V√©rifie que les identifiants Sellsy sont configur√©s
 * @throws {Error} - Si les identifiants ne sont pas configur√©s
 */
function checkSellsyCredentials() {
  if (!process.env.SELLSY_CLIENT_ID || !process.env.SELLSY_CLIENT_SECRET) {
    throw new Error('Les identifiants Sellsy ne sont pas configur√©s.');
  }
}

/**
 * Effectue une requ√™te √† l'API Sellsy
 * @param {string} method - La m√©thode HTTP (get, post, etc.)
 * @param {string} endpoint - L'endpoint API (sans le pr√©fixe d'URL)
 * @param {Object|null} data - Les donn√©es √† envoyer (pour POST, PUT, etc.)
 * @param {number} retryCount - Le nombre de tentatives d√©j√† effectu√©es
 * @returns {Promise<Object>} - La r√©ponse de l'API
 */
async function sellsyRequest(method, endpoint, data = null, retryCount = 0) {
  checkSellsyCredentials();
  const MAX_RETRIES = 3;
  try {
    const token = await getAccessToken();
    const config = {
      method,
      url: `${SELLSY_API_URL}${endpoint}`,
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    };
    if (data) config.data = data;
    
    console.log(`üîÑ Requ√™te ${method.toUpperCase()} √† ${endpoint}...`);
    const response = await axios(config);
    return response.data;
  } catch (error) {
    console.error(`‚ùå Erreur API Sellsy (${method} ${endpoint}) - tentative ${retryCount + 1}/${MAX_RETRIES}:`, error.message);
    if (error.response) {
      console.error("D√©tails de l'erreur:", error.response.data);
      if (error.response.status === 400 && data) {
        console.error("Corps de la requ√™te erron√©e:", JSON.stringify(data, null, 2));
      }
    }
    // R√©essayer en cas d'erreur d'authentification
    if (error.response?.status === 401) {
      accessToken = null;
      tokenExpiration = null;
      if (retryCount < MAX_RETRIES - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000));
        return sellsyRequest(method, endpoint, data, retryCount + 1);
      }
    }
    // R√©essayer pour les autres erreurs (sauf 400 Bad Request)
    if (retryCount < MAX_RETRIES - 1 && error.response?.status !== 400) {
      await new Promise(resolve => setTimeout(resolve, 2000));
      return sellsyRequest(method, endpoint, data, retryCount + 1);
    }
    throw error;
  }
}

/**
 * Recherche une m√©thode de paiement par son nom
 * @param {string} nameToFind - Le nom de la m√©thode de paiement √† chercher
 * @returns {Promise<string>} - L'ID de la m√©thode de paiement
 */
export async function findPaymentMethodByName(nameToFind) {
  try {
    console.log(`üîç Recherche de la m√©thode de paiement "${nameToFind}"...`);
    const response = await sellsyRequest('get', '/payments/methods');
    
    if (!response || !response.data) {
      throw new Error("Aucune m√©thode de paiement trouv√©e dans la r√©ponse");
    }
    
    const method = response.data.find(m => 
      m.label && m.label.toLowerCase().includes(nameToFind.toLowerCase())
    );
    
    if (!method) {
      console.warn(`‚ö†Ô∏è M√©thode de paiement "${nameToFind}" non trouv√©e. M√©thodes disponibles:`, 
        response.data.map(m => m.label).join(', '));
      throw new Error(`M√©thode de paiement "${nameToFind}" non trouv√©e.`);
    }
    
    console.log(`‚úÖ M√©thode de paiement trouv√©e: ${method.label} (ID: ${method.id})`);
    return method.id;
  } catch (error) {
    console.error("‚ùå Erreur lors de la recherche de m√©thode de paiement:", error);
    throw error;
  }
}

/**
 * G√©n√®re une facture dans Sellsy
 * @param {Object} options - Les options pour la cr√©ation de facture
 * @param {string|number} options.clientId - L'ID client Sellsy
 * @param {string|number} options.serviceId - L'ID service Sellsy
 * @param {string} options.serviceName - Le nom du service
 * @param {number|string} options.price - Le prix HT
 * @param {number|string} options.taxRate - Le taux de TVA (par d√©faut 20)
 * @param {string} options.paymentMethod - La m√©thode de paiement (par d√©faut 'pr√©l√®vement')
 * @returns {Promise<Object>} - La facture cr√©√©e
 */
export async function generateInvoice({ clientId, serviceId, serviceName, price, taxRate = 20, paymentMethod = 'pr√©l√®vement' }) {
  try {
    console.log(`üîÑ G√©n√©ration d'une facture pour le client ID ${clientId}, service: ${serviceName}`);
    
    if (!clientId || !serviceName || !price) {
      throw new Error(`Param√®tres manquants: clientId=${clientId}, serviceName=${serviceName}, price=${price}`);
    }
    
    // Recherche de l'ID de la m√©thode de paiement
    let paymentMethodId;
    try {
      paymentMethodId = await findPaymentMethodByName(paymentMethod);
    } catch (error) {
      console.warn(`‚ö†Ô∏è M√©thode de paiement non trouv√©e, la facture sera cr√©√©e sans m√©thode de paiement sp√©cifi√©e`);
    }
    
    // Pr√©paration des dates
    const today = new Date();
    const formattedDate = today.toISOString().split('T')[0];
    
    // Conversion des valeurs num√©riques
    const numericPrice = parseFloat(price);
    const numericTaxRate = parseFloat(taxRate);
    const numericClientId = parseInt(clientId);
    const numericServiceId = parseInt(serviceId);
    
    console.log(`üìä Prix: ${numericPrice}, Taux TVA: ${numericTaxRate}%, Client ID: ${numericClientId}`);
    
    // Cr√©ation de l'objet facture selon la documentation de l'API Sellsy V2
    const invoiceData = {
      date: formattedDate,
      due_date: formattedDate,
      subject: `Abonnement mensuel - ${serviceName}`,
      currency: "EUR",
      
      related: [
        {
          id: numericClientId,
          type: "individual"
        }
      ],
      
      note: "Facture pr√©lev√©e automatiquement par pr√©l√®vement SEPA √† r√©ception. Aucune action requise de votre part.",
      
      // Ajout de la m√©thode de paiement si disponible
      ...(paymentMethodId ? { payment_method_ids: [paymentMethodId] } : {}),
      
      rows: [
        {
          // Utiliser "catalog" comme type selon la documentation Sellsy V2
          type: "catalog",
          related: {
            id: numericServiceId,
            type: "service"
          },
          unit_amount: numericPrice.toString(), // Convertir en string comme demand√© dans la doc
          tax_rate: numericTaxRate.toString(), // Convertir en string
          quantity: "1", // En string d'apr√®s la doc
          description: serviceDescription
        }
      ]
    };
    
    console.log("üìÑ Donn√©es facture :", JSON.stringify(invoiceData, null, 2));
    
    // Cr√©ation de la facture
    const invoice = await sellsyRequest('post', '/invoices', invoiceData);
    console.log(`‚úÖ Facture cr√©√©e avec ID: ${invoice.id}`);
    
    // Validation de la facture (si n√©cessaire)
    try {
      await sellsyRequest('post', `/invoices/${invoice.id}/validate`, { date: formattedDate });
      console.log(`‚úÖ Facture ${invoice.id} valid√©e avec succ√®s`);
    } catch (validationError) {
      console.warn(`‚ö†Ô∏è Impossible de valider la facture: ${validationError.message}`);
      console.log(`‚ö†Ô∏è La facture a √©t√© cr√©√©e mais n'a pas pu √™tre valid√©e automatiquement.`);
    }
    
    return invoice;
  } catch (error) {
    console.error("‚ùå Erreur lors de la g√©n√©ration de la facture:", error);
    throw error;
  }
}

/**
 * V√©rifie la connexion √† l'API Sellsy
 * @returns {Promise<boolean>} - Vrai si la connexion est √©tablie avec succ√®s
 */
export async function checkSellsyConnection() {
  try {
    console.log('üîÑ V√©rification connexion API Sellsy...');
    checkSellsyCredentials();
    const token = await getAccessToken();
    if (!token) return false;
    
    // Au lieu de /account/info qui n'existe pas, utiliser un endpoint existant
    // /companies pour r√©cup√©rer la liste des entreprises (limit√© √† 1 r√©sultat pour √©viter une charge inutile)
    const response = await sellsyRequest('get', '/companies?limit=1');
    
    if (response) {
      console.log('‚úÖ Connexion API Sellsy OK');
      if (response.data && response.data.length > 0) {
        console.log(`üè¢ Premier client trouv√©: ${response.data[0].name || 'Non d√©fini'}`);
      } else {
        console.log(`üè¢ Connect√© √† l'API Sellsy (aucun client trouv√©)`);
      }
      return true;
    }
    return false;
  } catch (error) {
    console.error('‚ùå √âchec de connexion √† l\'API Sellsy:', error);
    return false;
  }
}
